<?php
namespace JDOUnivers\Helpers;

class WebHookDiscord
{
    /*
     * The URL generated by Discord to receive webhooks
     * @var string $url The URL generated by Discord to receive webhooks
     */
    private $url = null;
    /*
     * (Optional) The name that should be shown as the user sending the message
     * @var string $name The name that should be shown as the user sending the message
     */
    private $name = null;
    /*
     * (Optional) The image to be used as the avatar for the user sending the message
     * @var string $avatar The image to be used as the avatar for the user sending the message
     */
    private $avatar = null;
    /*
     * The message to be sent to Discord
     * @var string $message The message to be sent to Discord
     */
    private $message = null;
    /*
     * The message to be sent to Discord
     * @var string $message The message to be sent to Discord
     */
    private $embed = null;
    /*
     * Set up the class
     * @param string $url The URL generated by Discord to receive webhooks
     */
    public function __construct($url,$message = null,$name = null,$avatar = null,$embed = null) {
        $this->url = $url;
        $this->name = $url;
        $this->avatar = $url;
        $this->message = $url;
        $this->embed = $url;
    }

     /*
     * Sends a message through the webhook
     * @param string $message The message to send through the webhook
     */
    public function send($message = null) {
        $message = isset($message) ? $message : $this->message;
        $url = $this->url;
        $data = array(
            'content' => $message,
            'name' => $this->name,
            'avatar_url' => $this->avatar,
            'embed' => $this->embed,
        );
        $data_string = json_encode($data);
        $curl = curl_init();
        curl_setopt($curl, CURLOPT_URL, $url);
        curl_setopt($curl, CURLOPT_POST, 1);
        curl_setopt($curl, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, false);
        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);
        curl_setopt($curl, CURLOPT_POSTFIELDS, $data_string);
        $output = curl_exec($curl);
        $output = json_decode($output, true);
        if (curl_getinfo($curl, CURLINFO_HTTP_CODE) != 204) {
            throw new Exception($output['message']);
        }
        curl_close($curl);
        return true;
    }
}